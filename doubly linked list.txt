#include <iostream>
#include <string>
using namespace std;

// Node class representing a student in the doubly linked list.
class Node {
	public:
		string name;  // Name of the student
		int id;       // ID of the student
		int age;      // Age of the student
		Node *next;   // Pointer to the next node in the list
		Node *prev;   // Pointer to the previous node in the list

		// Constructor to initialize the node with student data
		Node(string name, int id, int age) {
			this->name = name;
			this->id = id;
			this->age = age;
			next = nullptr;  // Initially set next and prev to null
			prev = nullptr;
		}
};

// DoublyLinkedList class that manages the linked list.
class DoublyLinkedList {
	private:
		Node *head;  // Pointer to the head of the list

	public:
		// Constructor to initialize an empty list
		DoublyLinkedList() {
			head = nullptr;  // The list starts with no nodes
		}

		// Insertion at the beginning of the list
		void insertAtBeginning(string name, int id, int age) {
			if (id <= 0 || age <= 0) {
				cout << "Invalid ID or Age!" << endl;
				return;
			}

			Node *newNode = new Node(name, id, age);  // Create a new node

			if (head == nullptr) {  // If the list is empty, the new node becomes the head
				head = newNode;
			} else {
				newNode->next = head;  // New node's next points to the current head
				head->prev = newNode;  // Current head's prev points to the new node
				head = newNode;  // Move head to the new node
			}
			cout << "Student added successfully at the beginning!" << endl;
		}

		// Insertion at the end of the list
		void insertAtEnd(string name, int id, int age) {
			if (id <= 0 || age <= 0) {
				cout << "Invalid ID or Age!" << endl;
				return;
			}

			Node *newNode = new Node(name, id, age);  // Create a new node

			if (head == nullptr) {  // If the list is empty, the new node becomes the head
				head = newNode;
			} else {
				Node *temp = head;
				while (temp->next != nullptr) {  // Traverse to the last node
					temp = temp->next;
				}
				temp->next = newNode;  // Last node's next points to the new node
				newNode->prev = temp;  // New node's prev points to the last node
			}
			cout << "Student added successfully at the end!" << endl;
		}

		// Insertion at a specific position
		void insertAtPosition(string name, int id, int age, int position) {
			if (id <= 0 || age <= 0) {
				cout << "Invalid ID or Age!" << endl;
				return;
			}

			if (position < 0) {
				cout << "Invalid position!" << endl;
				return;
			}

			if (position == 0) {  // If position is 0, insert at the beginning
				insertAtBeginning(name, id, age);
				return;
			}

			Node *newNode = new Node(name, id, age);
			Node *temp = head;
			int count = 0;

			while (temp != nullptr && count < position - 1) {  // Traverse to the node just before the desired position
				temp = temp->next;
				count++;
			}

			if (temp == nullptr) {  // If position is out of range
				cout << "Position out of range!" << endl;
				return;
			}

			newNode->next = temp->next;  // New node's next points to the next node of the current node
			if (temp->next != nullptr) {
				temp->next->prev = newNode;  // Next node's prev points to the new node
			}
			temp->next = newNode;  // Current node's next points to the new node
			newNode->prev = temp;  // New node's prev points to the current node

			cout << "Student added successfully at position " << position << "!" << endl;
		}

		// Deletion from the beginning
		void deleteFromBeginning() {
			if (head == nullptr) {
				cout << "List is empty!" << endl;
				return;
			}

			Node *temp = head;  // Store the current head node
			head = head->next;  // Move the head pointer to the next node
			if (head != nullptr) {
				head->prev = nullptr;  // Set the new head's prev to null
			}
			delete temp;  // Delete the old head node
			cout << "Student deleted successfully from the beginning!" << endl;
		}

		// Deletion from the end
		void deleteFromEnd() {
			if (head == nullptr) {
				cout << "List is empty!" << endl;
				return;
			}

			if (head->next == nullptr) {  // If there's only one node in the list
				delete head;
				head = nullptr;
				cout << "Student deleted successfully from the end!" << endl;
				return;
			}

			Node *temp = head;
			while (temp->next != nullptr) {  // Traverse to the last node
				temp = temp->next;
			}

			temp->prev->next = nullptr;  // Second to last node's next is set to null
			delete temp;  // Delete the last node
			cout << "Student deleted successfully from the end!" << endl;
		}

		// Deletion from a specific position
		void deleteFromPosition(int position) {
			if (position < 0 || head == nullptr) {
				cout << "Invalid position or List is empty!" << endl;
				return;
			}

			if (position == 0) {  // If position is 0, delete from the beginning
				deleteFromBeginning();
				return;
			}

			Node *temp = head;
			int count = 0;

			while (temp != nullptr && count < position) {  // Traverse to the desired position
				temp = temp->next;
				count++;
			}

			if (temp == nullptr) {  // If position is out of range
				cout << "Position out of range!" << endl;
				return;
			}

			if (temp->prev != nullptr) {
				temp->prev->next = temp->next;  // Bypass the current node
			}

			if (temp->next != nullptr) {
				temp->next->prev = temp->prev;  // Bypass the current node
			}

			delete temp;  // Delete the current node
			cout << "Student deleted successfully from position " << position << "!" << endl;
		}

		// Display the list of students
		void display() {
			if (head == nullptr) {
				cout << "List is empty!" << endl;
				return;
			}

			Node *temp = head;
			cout << "List of Students: " << endl;
			while (temp != nullptr) {  // Traverse the list and print each student's data
				cout << "Name: " << temp->name << ", ID: " << temp->id << ", Age: " << temp->age << endl;
				temp = temp->next;
			}
		}

		// Search for a student by ID
		void search(int id) {
			Node *temp = head;
			while (temp != nullptr) {  // Traverse the list to search for the student by ID
				if (temp->id == id) {
					cout << "Student Found: Name: " << temp->name << ", ID: " << temp->id << ", Age: " << temp->age << endl;
					return;
				}
				temp = temp->next;
			}
			cout << "Student with ID " << id << " not found!" << endl;  // If student with ID is not found
		}

		// Destructor to free dynamically allocated memory
		~DoublyLinkedList() {
			while (head != nullptr) {  // Traverse and delete each node
				Node *temp = head;
				head = head->next;
				delete temp;
			}
		}
};

// Menu function to interact with the user
void menu() {
	DoublyLinkedList list;
	int choice, id, age, position;
	string name;

	while (true) {
		// Display menu options
		cout << "\nMenu:" << endl;
		cout << "1. Insertion at the beginning" << endl;
		cout << "2. Insertion at the end" << endl;
		cout << "3. Insertion at a specific position" << endl;
		cout << "4. Deletion from the beginning" << endl;
		cout << "5. Deletion from the end" << endl;
		cout << "6. Deletion from a specific position" << endl;
		cout << "7. Display the linked list" << endl;
		cout << "8. Search for a student by ID" << endl;
		cout << "9. Exit" << endl;

		cout << "Enter your choice: ";
		cin >> choice;

		switch (choice) {
			case 1:
				cout << "Enter student's name: ";
				cin >> name;
				cout << "Enter student's ID: ";
				cin >> id;
				cout << "Enter student's age: ";
				cin >> age;
				list.insertAtBeginning(name, id, age);
				break;

			case 2:
				cout << "Enter student's name: ";
				cin >> name;
				cout << "Enter student's ID: ";
				cin >> id;
				cout << "Enter student's age: ";
				cin >> age;
				list.insertAtEnd(name, id, age);
				break;

			case 3:
				cout << "Enter student's name: ";
				cin >> name;
				cout << "Enter student's ID: ";
				cin >> id;
				cout << "Enter student's age: ";
				cin >> age;
				cout << "Enter position to insert at: ";
				cin >> position;
				list.insertAtPosition(name, id, age, position);
				break;

			case 4:
				list.deleteFromBeginning();
				break;

			case 5:
				list.deleteFromEnd();
				break;

			case 6:
				cout << "Enter position to delete from: ";
				cin >> position;
				list.deleteFromPosition(position);
				break;

			case 7:
				list.display();
				break;

			case 8:
				cout << "Enter student's ID to search: ";
				cin >> id;
				list.search(id);
				break;

			case 9:
				cout << "Exiting..." << endl;
				return;

			default:
				cout << "Invalid choice, please try again!" << endl;
		}
	}
}

// Main function
int main() {
	menu();
	return 0;
}